import math
import warnings
import jax.numpy as jnp
import flax.linen as nn
import jax.random as jr
from functools import partial
from jax.scipy.special import erfinv

def _trunc_normal_(rng, shape, mean, std, a, b, dtype=jnp.float32):
    """
    sqa's modify, you must provide a rng key
    jax numpy implementation of truncated normal distribution
    """
    # Cut & paste from PyTorch official master until it's in a few official releases - RW
    # Method based on https://people.sc.fsu.edu/~jburkardt/presentations/truncated_normal.pdf
    assert mean == 0
    assert a == -2.0
    assert b == 2.0
    def norm_cdf(x):
        # Computes standard normal cumulative distribution function
        return (1. + math.erf(x / math.sqrt(2.))) / 2.

    if (mean < a - 2 * std) or (mean > b + 2 * std):
        warnings.warn("mean is more than 2 std from [a, b] in nn.init.trunc_normal_. "
                      "The distribution of values may be incorrect.",
                      stacklevel=2)

    # Values are generated by using a truncated uniform distribution and
    # then using the inverse CDF for the normal distribution.
    # Get upper and lower cdf values
    l = norm_cdf((a - mean) / std)
    u = norm_cdf((b - mean) / std)

    # Uniformly fill tensor with values from [l, u], then translate to
    # [2l-1, 2u-1].
    tensor = jr.uniform(rng, shape, dtype=dtype, minval=2 * l - 1, maxval=2 * u - 1)

    # Use inverse cdf transform for normal distribution to get truncated
    # standard normal
    tensor = erfinv(tensor)

    # Transform to proper mean, std
    tensor = tensor * (std * jnp.sqrt(2.)) + mean

    # Clamp to ensure it's in the proper range
    tensor = jnp.clip(tensor, a, b)
    return tensor


def trunc_normal_(mean=0., std=1., a=-2., b=2.):
    r"""Fills the input Tensor with values drawn from a truncated
    normal distribution. The values are effectively drawn from the
    normal distribution :math:`\mathcal{N}(\text{mean}, \text{std}^2)`
    with values outside :math:`[a, b]` redrawn until they are within
    the bounds. The method used for generating the random values works
    best when :math:`a \leq \text{mean} \leq b`.

    NOTE: this impl is similar to the PyTorch trunc_normal_, the bounds [a, b] are
    applied while sampling the normal with mean/std applied, therefore a, b args
    should be adjusted to match the range of mean, std args.

    Args:
        tensor: an n-dimensional `torch.Tensor`
        mean: the mean of the normal distribution
        std: the standard deviation of the normal distribution
        a: the minimum cutoff value
        b: the maximum cutoff value
    Examples:
        >>> w = torch.empty(3, 5)
        >>> nn.init.trunc_normal_(w)
    """
    return lambda rng, shape, dtype=jnp.float32: _trunc_normal_(rng, shape, mean, std, a, b, dtype)


def trunc_normal_tf_(tensor, rng, mean=0., std=1., a=-2., b=2.):
    r"""Fills the input Tensor with values drawn from a truncated
    normal distribution. The values are effectively drawn from the
    normal distribution :math:`\mathcal{N}(\text{mean}, \text{std}^2)`
    with values outside :math:`[a, b]` redrawn until they are within
    the bounds. The method used for generating the random values works
    best when :math:`a \leq \text{mean} \leq b`.

    NOTE: this 'tf' variant behaves closer to Tensorflow / JAX impl where the
    bounds [a, b] are applied when sampling the normal distribution with mean=0, std=1.0
    and the result is subsquently scaled and shifted by the mean and std args.

    Args:
        tensor: an n-dimensional `torch.Tensor`
        mean: the mean of the normal distribution
        std: the standard deviation of the normal distribution
        a: the minimum cutoff value
        b: the maximum cutoff value
    Examples:
        >>> w = torch.empty(3, 5)
        >>> nn.init.trunc_normal_(w)
    """
    def initializer(rng, shape, dtype=jnp.float32):
        tensor = _trunc_normal_(rng, shape, dtype, 0, 1.0, a, b)
        tensor = tensor * std + mean
    return initializer

def _calculate_fan_in_and_fan_out(tensor):
    raise NotImplementedError

def variance_scaling_(tensor, rng, scale=1.0, mode='fan_in', distribution='normal'):
    raise NotImplementedError

def lecun_normal_(tensor, rng):
    raise NotImplementedError

# Something we can trust (hopefully!)
zeros = nn.initializers.zeros
ones = nn.initializers.ones